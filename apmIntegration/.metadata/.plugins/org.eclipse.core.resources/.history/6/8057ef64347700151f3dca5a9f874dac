//Sample URL: http://10.130.179.82:8080/apm/metricFeed 

package apm.ca.com;


import java.io.BufferedReader;  
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;  
import java.io.InputStreamReader;  
import java.util.Iterator;
import java.util.Random;  
import java.util.regex.*;

import org.json.JSONException;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;

import org.apache.http.HttpResponse;  
import org.apache.http.client.HttpClient;  
import org.apache.http.client.methods.HttpPost;  
import org.apache.http.entity.ContentType;  
import org.apache.http.entity.StringEntity;  
import org.apache.http.impl.client.HttpClientBuilder;  
  
  
public class JSONPost {  
	
	public static void main(String[] args) {
  
  
    String apiURL;  
    Random random;  
    int number = 0;
    String name  = "test";
  
System.out.println("Starting...");

JSONParser parser = new JSONParser();
          try {  
        	  
        	  String input2 = "";
        	  
        	  // get values from JSON MAA output
        	  Object obj = parser.parse(new FileReader("C:\\MAA\\getJSON.txt"));
        	  
        	  String jsonData = obj.toString();
        	  jsonData = jsonData.replaceAll("],", "\n").replaceAll("\\[|\\]", "").replaceAll("\\{|\\}", "").replace("\"", "").replaceAll(",", ":");
 
        	  
        	  File file = new File("geo.txt");
        	  
      		// if file doesnt exists, then create it
  			if (!file.exists()) {
  				file.createNewFile();
  			}

  			FileWriter fw = new FileWriter(file.getAbsoluteFile());
  			BufferedWriter bw = new BufferedWriter(fw);
  			
  			 			
  			bw.write(jsonData);
  			bw.close();

  			//System.out.println("Done");

        	  
        	  
        	  BufferedReader br = new BufferedReader(new FileReader("geo.txt"));
        	  String sCurrentLine;
         	 
        	  // regex pattern to take only valid value pairs
        	  Pattern patt = Pattern.compile("[A-Z][A-Z][:][0-9][0-9]");   	
              while ((sCurrentLine = br.readLine()) != null) {
            	  
                  Matcher m = patt.matcher(sCurrentLine);
                  
                  while (m.find()) {

                  String[] information = sCurrentLine.split(":");
  
                   name = information[0];
                   number = Integer.parseInt(information[1]); //Integer.parseInt("1234");
                 //System.out.println("Name: " +name);
                  //System.out.println(number);
                  
             //     }
             // }
        	  
        	  //String jsonData = "{\"per_page\":14,\"country_record_count\":14,\"page\":1,\"countries\":[[\"country\",\"total\"],[\"\",66],[\"AR\",1],[\"CA\",9],[\"CL\",26],[\"CO\",4],[\"DE\",5],[\"DK\",3],[\"FR\",12],[\"IN\",31],[\"JP\",25],[\"PE\",14],[\"SG\",3],[\"TH\",5],[\"US\",629]],\"country_total_records\":14,\"total_records\":14}";
        	  
//System.out.println(jsonData);
          	  
              apiURL = "http://130.119.30.141:8081/apm/metricFeed";  
              random = new Random(System.currentTimeMillis());  
              
              //System.out.println("Response time: "+random);
              
               HttpClient c = HttpClientBuilder.create().build();        
               HttpPost p = new HttpPost(apiURL);        
  
  
               p.setEntity(new StringEntity(  
                         "{ \"metrics\" : [{ \"type\" : \"IntAverage\", \"name\" : \"Frontends|Apps|Foo:Country" + name + "\", \"value\"=\"" + number + "\"}] }",  
                         ContentType.create("application/json")));                 

               
             // System.out.println("{ \"metrics\" : [{ \"type\" : \"IntAverage\", \"name\" : \"Frontends|Apps|Foo:Country\", \"value\"=\"" + number + "\"}] }");
              //System.out.println("{ \"metrics\" : [{ \"type\" : \"IntAverage\", \"name\" : \"Frontends|Apps|Foo:Country " + name + ", \"value\"=\"" + number + "\"}] }");

               HttpResponse r = c.execute(p);  
               
               System.out.println("Done executing\n"); 

               BufferedReader rd = new BufferedReader(new InputStreamReader(r.getEntity().getContent()));  
               String line = "";  
               while ((line = rd.readLine()) != null) {  
                    System.out.println(line);  
               }  
          }  
          
              }
          }
          catch(Exception e) {  
               System.out.println(e);  
          }                        
     }    




	}
